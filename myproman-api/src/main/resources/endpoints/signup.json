{
  "swagger": "2.0",
  "info": {
    "title": "User Registration My Proman API",
    "version": "1.0.0",
    "description": "## Signup API"
  },
  "host": "myproman.io",
  "schemes": ["http", "https"],
  "basePath": "/api/signup",
  "tags": [
    {
      "name": "API#001 Signup",
      "description": "All operations marked with API#001 Signup are relevant to user signup use case"
    }
  ],
  "paths": {
    "/signup": {
      "x-swagger-router-controller": "api",
      "post": {
        "tags": ["API#001 Signup"],
        "operationId": "signupUser",
        "summary": "SignUp User",
        "description": "Each user who needs access to proman need to signup with details mentioned",
        "consumes": ["application/json;charset=UTF-8"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [
          {
            "$ref": "#/parameters/ClientId"
          },
          {
            "in": "body",
            "name": "SignUpUserRequest",
            "description": "Request container user signup details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignupUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created - User has been signedup Successfully",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend."
              },
              "location": {
                "type": "string",
                "description": "Location of the new resource which was created by this request"
              }
            },
            "schema": {
              "$ref": "#/definitions/SignupUserResponse"
            }
          },
          "400": {
            "description": "Bad Request --client error and request is not processed",
            "headers": {
              "request-id": {
                "$ref": "#/definitions/RequestId"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "$ref": "#/definitions/RequestId"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request had been applied because client application has no permission",
            "headers": {
              "request-id": {
                "$ref": "#/definitions/RequestId"
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "ClientId": {
      "name": "client-id",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "yet to see"
    }
  },
  "definitions": {
    "SignupUserRequest": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "First name of the new user"
        },
        "last_name": {
          "type": "string",
          "descripton": "Last name of the new user"
        },
        "email_address": {
          "type": "string",
          "description": "Email address of the new user"
        },
        "password": {
          "type": "string",
          "description": "Password of the new user",
          "format": "password",
          "x-obfuscated": true
        },
        "mobile_number": {
          "type": "string",
          "description": "Mobile Number of the new user"
        }
      },
      "required": [
        "first_name",
        "last_name",
        "email_address",
        "password",
        "mobile_number"
      ],
      "example": {
        "first_name": "Proman",
        "last_name": "Administrator",
        "email_address": "proman.admin@proman.io",
        "password": "Pr0m@n@dm1nu$er",
        "mobile_number": "+91 1234567890"
      }
    },
    "SignupUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User identifier in the standard UUID format generated by API backend"
        },
        "status": {
          "type": "string"
        }
      },
      "required": ["id", "status"]
    },
    "RequestId": {
      "type": "string",
      "description": "Used as correlation id while tracing for the request in the backend"
    }
  }
}
