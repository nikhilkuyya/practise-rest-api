/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import practise.myproman.api.model.SignupUserRequest;
import practise.myproman.api.model.SignupUserResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-12-21T19:22:03.194+05:30")

@Api(value = "signup", description = "the signup API")
public interface SignupApi {

    Logger log = LoggerFactory.getLogger(SignupApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "SignUp User", nickname = "signupUser", notes = "Each user who needs access to proman need to signup with details mentioned", response = SignupUserResponse.class, tags={ "API#001 Signup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created - User has been signedup Successfully", response = SignupUserResponse.class),
        @ApiResponse(code = 400, message = "Bad Request --client error and request is not processed"),
        @ApiResponse(code = 401, message = "UNAUTHORIZED - user has provided wrong credentials"),
        @ApiResponse(code = 403, message = "FORBIDDEN - request had been applied because client application has no permission") })
    @RequestMapping(value = "/signup",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SignupUserResponse> signupUser(@ApiParam(value = "yet to see" ,required=true) @RequestHeader(value="client-id", required=true) String clientId,@ApiParam(value = "Request container user signup details" ,required=true )  @Valid @RequestBody SignupUserRequest signUpUserRequest) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : \"id\",  \"status\" : \"status\"}", SignupUserResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SignupApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
